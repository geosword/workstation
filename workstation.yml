# this MUST be run as root, so that it can create the non priviledged user.
# VARS - take network config so we can specify things like search domain.

- hosts: all
  gather_facts: false
  tasks:
    - name: "check for python"
      raw: test -e /usr/bin/python2
      changed_when: false
      ignore_errors: true
      register: pythoninstalled

    - name: Synchronise the package databases
      raw : /usr/bin/pacman -Syy

    - name: install python if its not there.
      raw: /usr/bin/pacman -S --noconfirm python2
      when:
        - pythoninstalled.rc != 0

- hosts: all
  tasks:
    - name: include some global variables
      include_vars: "{{ item }}"
      with_items:
        - vars/main.yml

# update the mirrors list
    - name: download pacman mirror list
      get_url:
        url: "https://www.archlinux.org/mirrorlist/?country=GB&country=DE&country=US&protocol=http&protocol=https&ip_version=4&use_mirror_status=on"
        dest: "/etc/pacman.d/mirrorlist"
        force: yes

    - name: "uncomment `#Server` in pacman mirror list"
      replace:
        dest: "/etc/pacman.d/mirrorlist"
        regexp: '^#Server'
        replace: 'Server'

    - name: Synchronise the package databases
      command: /usr/bin/pacman -Syy

    - name: Refresh the pacman-keys
      command: /usr/bin/pacman-key --refresh-keys

    - name: "uncomment colors"
      lineinfile:
        dest: /etc/pacman.conf
        state: "present"
        regexp: "^Color"
        insertafter: "^#Color"
        line: "Color"

# install a bunch of stuff
    - name: install a bunch of stuff
      command: "/usr/bin/pacman -S --noconfirm {{ item }}"
      with_items:
# basic stuff
        - base-devel
        - breeze-gtk
        - bind-tools
# THERES more STUFF TO DO FOR SETTING UP BLUETOOTH. check the archlinux bluetooth page for details
        - bluez
        - bluez-utils
        - dolphin
# fakeroot is needed for makepkg which is needed to install google-chrome.
        - fakeroot
        - firefox
        - git
        - grub
        - hwinfo
        - ipcalc
        - icu
        - kcalc
        - keychain
        - keepassxc
        - konsole
        - kde-gtk-config
        - net-tools
        - nvidia
        - nvidia-settings
        - nvidia-utils
        - pavucontrol
        - plasma
        - pwgen
        - rdesktop
        - rdiff-backup
        - riot-desktop
        - rsync
        - sddm
        - sudo
        - syncthing
        - tmux
        - vim
        - wmctrl
        - xdotool
        - xorg
        - xorg-xinit
# zathura is a minimal pdf viewer with vim keybindings. https://wiki.archlinux.org/index.php/Zathura
        - zathura
        - zsh
        - zsh-theme-powerlevel9k
      ignore_errors: true
      tags: packages

# Install sublime text
    - name: fetch sublime repo key for arch
      get_url: 
        url: https://download.sublimetext.com/sublimehq-pub.gpg
        dest: /var/tmp/sublimehq-pub.gpg
      tags: installsublime

    - name: add the key
      command: pacman-key --add /var/tmp/sublimehq-pub.gpg
      tags: installsublime

    - name: sign it
      command: pacman-key --lsign-key 8A8F901A
      tags: installsublime

    - name: remove the key from /var/tmp
      file:
        path: /var/tmp/sublimehq-pub.gpg
        state: absent
      tags: installsublime

   # add the sublime repo to pacman.conf
    - name: add sublime repo to pacman.conf
      blockinfile:
        path: /etc/pacman.conf
        block: |
          [sublime-text]
          Server = https://download.sublimetext.com/arch/dev/x86_64
      tags: installsublime

    - name: now install. We'll use command cause we need special pacman flags (-uy) This could take a while, check /var/log/pacman.log for progress
      command: pacman -Syu --noconfirm sublime-text
      args:
        creates: /opt/sublime_text/sublime_text
      tags: installsublime

## create the group for the non privileged user
    - name: create group
      group:
        name: dylanh
      tags:
        - createuser

## create my non privileged user
    - name: create user
      user:
        name: dylanh
        shell: /usr/bin/zsh
# lp group allows bluetooth access, wheel allows root access to things
        groups: wheel,dylanh,lp
        # the password is test123
        password: "$6$8TfIqE.dd/0iUF1Q$txKOLAfCAfofs8OCljKEtXFoXJjZamLsMVe/0EVy5yvr3z2USWsrG2wRwC0c4ARWsZ4ckFPcrEcl/fp9aSn4J/"
        home: "{{ userdir }}"
      tags:
        - createuser


    - name: create the .ssh folder
      file:
        path: "{{ userdir }}/.ssh"
        mode: '0700'
        state: directory
        owner: dylanh
        group: dylanh
      tags:
        - createuser

# we going to use systemd-resolved against my better judgement
    - name: replace /etc/resolv.conf with a link to system-resolved configuration
      file:
        src: /run/systemd/resolve/stub-resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: yes

    - name: set the keyboard layout to UK
      copy:
        dest: /etc/vconsole.conf
        content: 'KEYMAP=uk'

    - name: set the timezone
      timezone:
        name: Europe/London

    - name: set the locale
      locale_gen:
        name: en_GB.UTF-8
        state: present

    - name: make sure vfat and others are loaded at boot to prevent problems updating the kernel
      copy:
        dest: /etc/modules-load.d/vfat.conf
        content: |
          vfat
          nls_cp437
          nls_iso8859-1

# Avoid "xf86EnableIOPorts: failed to set IOPL for I/O (Operation not permitted)"  when using startx as user
    - name: Add the sticky bit to /usr/bin/xinit
      file:
        dest: /usr/bin/xinit
        mode: u+s
      tags:
        - stickybit

# Allow members of wheel to privilege escalate without a password
    - name: allow wheel passwordless sudo privs
      replace:
        dest: "/etc/sudoers"
        regexp: "^# %wheel ALL=\\(ALL\\) NOPASSWD"
        replace: "%wheel ALL=(ALL) NOPASSWD"


    - name: copy in the xorg for this host. NOTE this assumes the file is in files/hostname/xorg.conf. The file may be empty where such a file is not required.
      copy:
        src: "files/{{ inventory_hostname }}/xorg.conf"
        dest: /etc/X11/xorg.conf
        group: wheel
        mode: '0775'

    - name: get an xorg configuration using nvidia-xconfig
      command: /usr/bin/nvidia-xconfig
      args:
        creates: /etc/X11/xorg.conf

    - name: make the xorg configuration editable by users in the wheel group (me)
      file:
        path: /etc/X11
        group: wheel
        mode: '0775'

    - name: xinitrc
      copy:
        dest: "{{ userdir }}/.xinitrc"
        content: |
          exec /usr/bin/startplasma-x11
        owner: dylanh
        group: dylanh

    - name: create an sddm config drop in folder
      file: 
        path: /etc/sddm.conf.d/
        state: directory
        mode: '0755'
      tags:
        - sddmconfig

    - name: create the sddm theme drop in
      copy:
        dest: /etc/sddm.conf.d/theme.conf
        content: |
          [Theme]
          Current=breeze
          CursorTheme=
          DisableAvatarsThreshold=7
          EnableAvatars=true
          FacesDir=/usr/share/sddm/faces
          ThemeDir=/usr/share/sddm/themes
      tags:
        - sddmconfig


# Some stuff for when we are testing with vagrant
    - name: Include virtualbox operations if we are in virtualbox
      include: virtualbox.yaml
      when: 
        - ansible_virtualization_type == 'virtualbox'

    - name: enable & start sddm
      systemd:
        state: started
        name: sddm.service
        enabled: true
# this just checks out the repo, you still need to cd to it and run makepkg -s
    - name: clone google-chrome repo
      git:
        repo: https://aur.archlinux.org/google-chrome.git
        dest: /usr/src/google-chrome
        update: no
      tags:
        - installchrome

    - name: make google-chrome source code available to me
      file: 
        path: /usr/src/google-chrome
        group: wheel
        mode: '0775'
      tags:
        - installchrome

    - name: run makepkg in the google-chrome folder we just made
      command: chdir=/usr/src/google-chrome makepkg -s --noconfirm
      args:
        creates: /usr/src/google-chrome/google-chrome-*.pkg.tar.xz
      become: true
      become_user: dylanh
      tags:
        - installchrome

# This pattern could be a bit loose
    - name: get a list of pkg.tar.xz files to install
      find:
        paths: /usr/src/google-chrome/
        patterns: '*.pkg.tar.xz'
      register: chromepackage
      tags:
        - installchrome

# now to install it, provided it not installed.
    - name: now install the package we just makepkg'd. I hope we can install using wildcards.
      command: chdir=/usr/src/google-chrome pacman -U --noconfirm {{ item.path | basename }}
      with_items: "{{ chromepackage.files }}"
      failed_when: chromepackage.matched == 0
      args:
        creates: /usr/bin/google-chrome-stable
      when:
        - chromepackage.matched > 0
      tags:
        - installchrome

    - name: message
      debug:
        msg: "DO THIS NOW. Set passwords for both dylanh and root to something more secure than test123!!!! ********* Do it!!!! get to tha choppppaaaaaaahhhh!"
