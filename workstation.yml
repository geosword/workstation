---
# vim:filetype=yaml.ansible
# this MUST be run as root, so that it can create the non priviledged user.
# VARS - take network config so we can specify things like search domain.
#
# Make this into roles. e.g. an ansible role, a terraform role, a docker role and so on. That way you can re-use and more easily configure
# exactly what features your workstation has

- hosts: all
  gather_facts: false
  tasks:
    - name: "check for python"
      raw: test -e /usr/bin/python2
      changed_when: false
      ignore_errors: true
      register: pythoninstalled

# TODO check the date on /var/lib/pacman/sync/core.db, if its today, skip the synchronisation
    - name: Synchronise the package databases  # noqa 301
      raw: /usr/bin/pacman -Syy

    - name: install python if its not there.
      raw: /usr/bin/pacman -S --noconfirm python2
      when:
        - pythoninstalled.rc != 0

- hosts: all
  tasks:
    - name: include some global variables
      include_vars: "{{ item }}"
      with_items:
        - vars/main.yml

# update the mirrors list
    - name: download pacman mirror list
      get_url:
        url: "https://www.archlinux.org/mirrorlist/?country=GB&country=DE&country=US&protocol=http&protocol=https&ip_version=4&use_mirror_status=on"
        dest: "/etc/pacman.d/mirrorlist"
        force: true
      tags: packages

    - name: "uncomment `#Server` in pacman mirror list"
      replace:
        dest: "/etc/pacman.d/mirrorlist"
        regexp: '^#Server'
        replace: 'Server'
      tags: packages

    - name: Synchronise the package databases
      command: /usr/bin/pacman -Syy # noqa 301
      tags: sync-packages

    - name: Refresh the pacman-keys # noqa 301
      command: /usr/bin/pacman-key --refresh-keys
      tags: sync-packages


    - name: "uncomment colors"
      lineinfile:
        dest: /etc/pacman.conf
        state: "present"
        regexp: "^Color"
        insertafter: "^#Color"
        line: "Color"

# install a bunch of stuff
# TODO When we want to install new packages IT MUST go here, however there is a lot of stuff in here
# That we either dont want or dont need to run at the same time, so perhaps seperate out the installation
# of packages to a different play, or put it in the wsconfig play, but only run the required tasks when a variable is
# set e.g. installpackages=true
    - name: install a bunch of stuff # noqa 301
      command: "/usr/bin/pacman -S --noconfirm {{ item }}"
      with_items:
# basic stuff
        - ansible
        - ansible-lint
        - ark
        - awesome-terminal-fonts
        - aws-cli
        - base-devel
        - breeze-gtk
        - bind-tools
# THERES more STUFF TO DO FOR SETTING UP BLUETOOTH. check the archlinux bluetooth page for details
        - bluez
        - bluez-utils
        - cups
        - cronie
        - docker
        - dolphin
# Clementine is a Music player with plasma media integration. Yes it needs all those plugins to work.
        - Clementine
        - gst-plugins-good
        - gst-plugins-base
        - gst-libav
        - gst-plugins-bad
        - gst-plugins-ugly
# fakeroot is needed for makepkg which is needed to install google-chrome and other stuff in the AUR
        - fakeroot
        - flake8
        - firefox
# fzf is a fuzzy file searcher which is awesome and Ive only touched the surface of
        - fzf
# Ghostscript is needed for printing to work.
        - ghostscript
        - git
        - grub
        - gnome-keyring
        - gwenview
# Drivers for most hp printers
        - hplip
        - hwinfo
        - ipcalc
        - icu
        - jq
        - kcalc
        - keychain
        - keepassxc
        - konsole
        - kde-gtk-config
        - kwalletmanager
        - latte-dock
        - lsoflatte-dock
        - neovim
        - net-tools
        - nvidia
        - nvidia-settings
        - nvidia-utils
        - pavucontrol
        - plasma
        - powerline
        - powerline-vim
        - powerline-fonts
        - pulseaudio
        - pulseaudio-bluetooth
        - pwgen
        - python2
        - python2-pip
        - python2-pylint
        - python2-virtualenv
        - python-pip
        - python-pylint
        - python-virtualenv
        - python-virtualenvwrapper
        - rdesktop
        - rdiff-backup
        - riot-desktop
        - rsync
        - sddm
        - subversion
        - sudo
        - syncthing
        - tcpdump
        - terraform
        - tmux
        - traceroute
        - unzip
        - vim
        - vlc
        - wget
        - wmctrl
        - xclip
        - xdotool
        - xorg
        - xorg-xinit
        - xsel
        - yamllint
        - youtube-dl
# zathura is a minimal pdf viewer with vim keybindings. https://wiki.archlinux.org/index.php/Zathura
        - zathura
        - zathura-pdf-mupdf
        - zsh
        - zsh-theme-powerlevel9k
      ignore_errors: true
      tags: install-packages

    - name: Disable cowsay in ansible, its just annoying
      replace:
        dest: "/etc/ansible/ansible.cfg"
        regexp: '^#nocows=1'
        replace: 'nocows=1'
      tags:
        - disablecowsay

    - name: Disable host key checking too
      replace:
        dest: "/etc/ansible/ansible.cfg"
        regexp: '^#host_key_checking = False'
        replace: 'host_key_checking = False'
      tags:
        - disablehostkeychecking

## create the group for the non privileged user
    - name: create group
      group:
        name: dylanh
      tags:
        - createuser

# Allow members of wheel to privilege escalate without a password
    - name: allow wheel passwordless sudo privs
      replace:
        dest: "/etc/sudoers"
        regexp: "^# %wheel ALL=\\(ALL\\) NOPASSWD"
        replace: "%wheel ALL=(ALL) NOPASSWD"

## create my non privileged user
    - name: create user
      user:
        name: dylanh
        shell: /usr/bin/zsh
# lp group allows bluetooth access, wheel allows root access to things, informant membership is needed to allow it to mark arch communication / upgrade messages as read
        groups: wheel,dylanh,lp,cups,informant
        group: dylanh
        # the password is test123
        password: "$6$8TfIqE.dd/0iUF1Q$txKOLAfCAfofs8OCljKEtXFoXJjZamLsMVe/0EVy5yvr3z2USWsrG2wRwC0c4ARWsZ4ckFPcrEcl/fp9aSn4J/"
        home: "{{ userdir }}"
      tags:
        - createuser


    - name: create the .ssh folder
      file:
        path: "{{ userdir }}/.ssh"
        mode: '0700'
        state: directory
        owner: dylanh
        group: dylanh
      tags:
        - createuser

# install kubectl. we dont use get_url here because its doing a secondary call to find out the current stable release
# for some reason using the file module to set the permissions just didnt work. It would set the directory and group, but not "other"
    - name: install kubectl # noqa 303
      shell:
        cmd: "curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod 775 /usr/local/sbin/kubectl"
        chdir: "/usr/local/sbin/"
        creates: "/usr/local/sbin/kubectl"
      become: true
      tags:
        - installkubectl

    - name: install tflint # noqa 303
      shell:
        cmd: "curl -L $(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E 'https://.+?_linux_amd64.zip') -o tflint.zip && unzip tflint.zip && rm /usr/local/sbin/tflint.zip"
        chdir: "/usr/local/sbin/"
        creates: "/usr/local/sbin/tflint"
      become: true
      tags:
        - installtflint

    - name: enable cups for printing. This starts the socket, so if we access cups it will start it
      systemd:
        name: bluetooth.service
        state: started
        enabled: true
      tags:
        - bluetooth

    - name: enable cups for printing. This starts the socket, so if we access cups it will start it
      systemd:
        name: org.cups.cupsd.service
        state: started
        enabled: true
      tags:
        - cups

# Install canonical's snap from the AUR (another package management system to unify them all)
    - name: clone Snap AUR
      git:
        repo: https://aur.archlinux.org/snapd.git
        dest: /usr/src/snapd
        update: false
      tags:
        - installsnap

    - name: make snap source code available to me (dylanh user)
      file:
        path: /usr/src/snapd
        group: wheel
        mode: '0775'
      tags:
        - installsnap

    - name: Build and install snap
      command: chdir=/usr/src/snapd makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - installsnap

    - name: enable apparmor so that snaps dont have free reign on the system
      systemd:
        name: apparmor
        state: started
        enabled: true
      tags:
        - installsnap

    - name: enable the snap socket. i think this listens for snap trying to connect, and starts the snapd server if so
      systemd:
        name: snapd.socket
        state: started
        enabled: true
      tags:
        - installsnap

    - name: /snap is needed for snap client to work. A bit lame.
      file:
        src: /var/lib/snapd/snap
        dest: /snap
        state: link
      tags:
        - installsnap

#  Install sublime text
    - name: install sublime from snap
      snap:
        name: sublime-text
        classic: true

# we going to use systemd-resolved against my better judgement
    - name: replace /etc/resolv.conf with a link to system-resolved configuration
      file:
        src: /run/systemd/resolve/stub-resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: true

    - name: set the keyboard layout to UK
      copy:
        dest: /etc/vconsole.conf
        content: 'KEYMAP=uk'

    - name: set the timezone
      timezone:
        name: Europe/London

    - name: set the locale
      locale_gen:
        name: en_GB.UTF-8
        state: present

    - name: make sure vfat and others are loaded at boot to prevent problems updating the kernel
      copy:
        dest: /etc/modules-load.d/vfat.conf
        content: |
          vfat
          nls_cp437
          nls_iso8859-1

# Avoid "xf86EnableIOPorts: failed to set IOPL for I/O (Operation not permitted)"  when using startx as user
    - name: Add the sticky bit to /usr/bin/xinit
      file:
        dest: /usr/bin/xinit
        mode: u+s
      tags:
        - stickybit


    - name: check for custom xorg config
      find:
        paths: "files/{{ inventory_hostname }}/"
        patterns: 'xorg.conf'
      register: customxorg

    - name: copy in the xorg for this host. NOTE this assumes the file is in files/hostname/xorg.conf. The file may be empty where such a file is not required.
      copy:
        src: "files/{{ inventory_hostname }}/xorg.conf"
        dest: /etc/X11/xorg.conf
        group: wheel
        mode: '0775'
      when:
        - customxorg.matched > 0

    - name: configure autoloading the nvidia modules when appropriate
      copy:
        dest: /etc/modules-load.d/nvidia.conf
        content: |
          # Load nvidia at boot
          nvidia
      when:
        - (inventory_hostname == 'milano' or inventory_hostname == 'geosword' or inventory_hostname == 'hoff')

    - name: load the nvidia modules when appropriate
      modprobe:
        name: nvidia
        state: present
      when:
        - (inventory_hostname == 'milano' or inventory_hostname == 'geosword' or inventory_hostname == 'hoff')

    - name: get an xorg configuration using nvidia-xconfig
      command: /usr/bin/nvidia-xconfig
      args:
        creates: /etc/X11/xorg.conf
      when:
        - customxorg.matched == 0
        - (inventory_hostname == 'milano' or inventory_hostname == 'geosword' or inventory_hostname == 'hoff')

    - name: make the xorg configuration editable by users in the wheel group (me)
      file:
        path: /etc/X11
        group: wheel
        mode: '0775'

    - name: xinitrc
      copy:
        dest: "{{ userdir }}/.xinitrc"
        content: |
          exec /usr/bin/startplasma-x11
        owner: dylanh
        group: dylanh

    - name: create an sddm config drop in folder
      file:
        path: /etc/sddm.conf.d/
        state: directory
        mode: '0755'
      tags:
        - sddmconfig

    - name: create the sddm theme drop in
      copy:
        dest: /etc/sddm.conf.d/theme.conf
        content: |
          [Theme]
          Current=breeze
          CursorTheme=
          DisableAvatarsThreshold=7
          EnableAvatars=true
          FacesDir=/usr/share/sddm/faces
          ThemeDir=/usr/share/sddm/themes
      tags:
        - sddmconfig

    - name: Autologin for sddm. Will be disabled later
      copy:
        dest: /etc/sddm.conf.d/autologin.conf
        content: |
          [Autologin]
          User=dylanh
          Session=plasma.desktop
      tags:
        - sddmconfig

# Some stuff for when we are testing with vagrant
    - name: Include virtualbox operations if we are in virtualbox
      include: virtualbox.yaml
      when:
        - ansible_virtualization_type == 'virtualbox'

    - name: enable & start sddm
      systemd:
        state: started
        name: sddm.service
        enabled: true

    - name: enable & start syncthing
      systemd:
        name: syncthing@dylanh.service
        state: started
        enabled: true

# Install chrome. We're not installing via snap because that is Chromium, NOT chrome
    - name: clone google-chrome repo
      git:
        repo: https://aur.archlinux.org/google-chrome.git
        dest: /usr/src/google-chrome
        update: true
      tags:
        - installchrome

    - name: make google-chrome source code available to me (dylanh user)
      file:
        path: /usr/src/google-chrome
        group: wheel
        mode: '0775'
      tags:
        - installchrome

    - name: Build and install chrome
      command: chdir=/usr/src/google-chrome makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - installchrome

# Install powerlevel10k.
    - name: clone powerlevel10k
      git:
        repo: https://aur.archlinux.org/zsh-theme-powerlevel10k-git.git
        dest: /usr/src/zsh-theme-powerlevel10k-git
        update: true
      tags:
        - powerlevel10k

    - name: make powerlevel10k source code available to me (dylanh user)
      file:
        path: /usr/src/zsh-theme-powerlevel10k-git
        group: wheel
        mode: '0775'
      tags:
        - powerlevel10k

    - name: Build and install powerlevel10k
      command: chdir=/usr/src/zsh-theme-powerlevel10k-git makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - powerlevel10k

# Install Helm3
    - name: clone helm3
      git:
        repo: https://aur.archlinux.org/kubernetes-helm.git
        dest: /usr/src/helm3
        update: true
      tags:
        - helm3

    - name: make helm3 source code available to me (dylanh user)
      file:
        path: /usr/src/helm3
        group: wheel
        mode: '0775'
      tags:
        - helm3

    - name: Build and install helm3
      command: chdir=/usr/src/helm3 makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - helm3

    - name: Change the name of the helm3 binary to be helm3 so we have to specify a version when calling
      command: mv /usr/bin/helm /usr/bin/helm3
      tags:
        - helm3

# Install Helm2

    - name: download helm2 manually, because we cant install helm3 and helm2 at the same time using AUR
      shell:
        cmd: |
          curl https://get.helm.sh/helm-$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')-linux-amd64.tar.gz -o /var/tmp/helm2-linux-amd64.tar.gz
        creates: "/var/tmp/helm2-linux-amd64.tar.gz"
      tags:
        - helm2

    - name: extract helm2 to somewhere in the path
      command: "tar -zxvf /var/tmp/helm2-linux-amd64.tar.gz -C /usr/local/sbin/ --strip-components=1"
      tags:
        - helm2

    - name: Change the name of the helm2 binary to be helm2 so we have to specify a version when calling
      command: mv /usr/local/sbin/helm /usr/local/sbin/helm2
      tags:
        - helm2

# Install informant that will check to see if there are any unread news articles to read before we upgrade
    - name: clone informant
      git:
        repo: https://aur.archlinux.org/informant.git
        dest: /usr/src/informant
        update: true
      tags:
        - informant

    - name: make informant source code available to me (dylanh user)
      file:
        path: /usr/src/informant
        group: wheel
        mode: '0775'
      tags:
        - informant

    - name: Build and install informant
      command: chdir=/usr/src/informant makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - informant

# Install kernel-modules-hook which will take a backup of the existing /lib/modules folder before the kernel gets upgraded.
# Means you dont need to reboot after each kernel upgrade to modprobe
    - name: clone kernel-modules-hook
      git:
        repo: https://aur.archlinux.org/kernel-modules-hook.git
        dest: /usr/src/kernel-modules-hook
        update: true
      tags:
        - kmh

    - name: make informant source code available to me (dylanh user)
      file:
        path: /usr/src/kernel-modules-hook
        group: wheel
        mode: '0775'
      tags:
        - kmh

    - name: Build and install informant
      command: chdir=/usr/src/kernel-modules-hook makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - kmh

    - name: enable the kernel-module-hook service
      systemd:
        name: linux-modules-cleanup
        state: started
        enable: true
        reload: true
      tags:
        - kmh

# Install puppet-lint
    - name: clone puppet-lint
      git:
        repo: https://aur.archlinux.org/puppet-lint.git
        dest: /usr/src/puppet-lint
        update: true
      tags:
        - puppet-lint

    - name: make puppet-lint source code available to me (dylanh user)
      file:
        path: /usr/src/puppet-lint
        group: wheel
        mode: '0775'
      tags:
        - puppet-lint

    - name: Build and install puppet-lint
      command: chdir=/usr/src/puppet-lint makepkg -sirc --noconfirm
      become: true
      become_user: dylanh
      tags:
        - puppet-lint
# some general stuff

    - name: remove autologin config
      file:
        path: /etc/sddm.conf.d/autologin.conf
        state: absent

    - name: add the backup scripts when on geosword
      copy:
        src: "{{ item }}"
        dest: "{{ userdir }}/.tools/"
        mode: "0744"
        owner: dylanh
        group: dylanh
      with_items:
        - files/geosword/backupme.sh
        - files/geosword/backuphome.sh
      when:
        - (inventory_hostname == 'geosword')
      tags:
        - backupscripts

    - name: backup host cronjob
      cron:
        name: backup host
        minute: 0
        hour: 2
        job: "{{ userdir }}/.tools/backupme.sh"
        user: root
      when:
        - (inventory_hostname == 'geosword')
      tags:
        - backupscripts

    - name: backup home cronjob
      cron:
        name: backup home
        minute: 0
        hour: 23
        weekday: 5
        job: "{{ userdir }}/.tools/backuphome.sh"
        user: root
      when:
        - (inventory_hostname == 'geosword')
      tags:
        - backupscripts

    - name: enable & start iptables
      systemd:
        name: iptables
        enabled: true
        state: started

    - name: enable & start docker
      systemd:
        name: docker
        enabled: true
        state: started

# TODO something to remind you to update weekly pacman?
    - name: backup home cronjob
      cron:
        name: backup home
        minute: 0
        hour: 5
        # 1,4 means run on Monday and Thursday. Twice seems like a good cadence for no particular reason
        weekday: "1,4"
        job: "/usr/bin/pacman -Syy"
        user: root
      tags:
        - pacman

# pip install msgpack (for deoplete autocompletion in neovim)
    - name: install msgpack for deoplete - used for autocompletion in vim
      pip:
        name: msgpack

    - name: message
      debug:
        msg: "DO THIS NOW. Set passwords for both dylanh and root to something more secure than test123!!!! ********* Do it!!!! get to tha choppppaaaaaaahhhh!"
