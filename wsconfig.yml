# The idea of this playbook is that it maintains the configuration of the workstation, rather than boot strapping it
# Currently it handles three specific files of plasma, but could also manage tmux, vim or anything else we can resonably control
# with config files
- hosts: all
  tasks:
    - name: include some global variables
      include_vars: "{{ item }}"
      with_items:
        - vars/main.yml

    - name: create some helpful folders
      file:
        path: "{{ userdir }}/{{ item }}"
        state: directory
        mode: "0755"
  #        group: "dylanh"
  #        owner: "dylanh"
      become: true
      become_user: dylanh
      with_items: 
        - development
        - Documents
        - Downloads
        - Pictures
        - tools
        - temp
      tags:
        - createfolders

    - name: switch.py for launching and switching hotness
      git:
        repo: "https://gitea.sectigo.net/dylanh/switchto.git"
        dest: "{{ userdir }}/tools/switchto"
      become: true
      become_user: dylanh

    - name: make sure any old staging areas / repos are not there
      file:
        path: "{{ item }}"
        state: absent
      with_items:
       - "files/stage/{{ inventory_hostname }}"
       - files/inimerger
       - files/stock
      delegate_to: localhost

# files/stock is config copied FROM a workstation
# files/stage is config processed by the playbook and ready TO copy to the workstation
    - name: make sure local work folders exist
      file:
        path: "{{ item }}"
        state: directory
      delegate_to: localhost
      with_items:
        - files/stock
        - files/stage
        - "files/stage/{{ inventory_hostname }}"
        - "files/stage/{{ inventory_hostname }}/.config"

    - name: stop sddm if its running
      systemd:
        state: stopped
        name: sddm.service

    - name: kill all dylanh processes
      command: killall -4 -u dylanh
      ignore_errors: true

    - name: mainly for testing, remove the userdir .config folder
      file:
        path: "{{ userdir }}/.config/"
        state: absent
      when: inventory_hostname == 'vbox'

    - name: mainly for testing, create the userdir .config folder
      file:
        path: "{{ userdir }}/.config/"
        state: directory
        owner: dylanh
        group: dylanh

# KDE Config process:
# SDDM is set to autologin, which generates "stock" kde config files. These are copied into stock
#
    - name: get a list of any defaults we need to copy over
      find:
        path: files/defaults/files/dotconfig/
        patterns: "*"
      register: defaultconfigs
      delegate_to: localhost

    - name: copy the config overrides for things like the clock config, calc applet, and system tray settings
      copy:
        src: "{{ item.path }}"
        dest: "{{ userdir }}/.config/{{ item.path | basename }}"
      with_items:
        - "{{ defaultconfigs.files }}"
      tags:
        - copydefaults

# make sure sddm is running so we have a default config (the workstation playbook SHOULD have configured autologin for it)
    - name:  start sddm to create the other config files that we dont have "defaults" for
      systemd:
        state: started
        name: sddm.service

# By this point we should have "stock" plasma files in /home/dylanh/.config because of the auto login configuration on sddm
    - name: wait for something like the plasma config to appear
      wait_for:
        path: "{{ userdir }}/.config/plasmashellrc"
# Pull those and others from the workstation, to get (as close as possible) to a default configuration.

    - name: find what files we need to inimerge
      find:
        path: files/defaults/merges/dotconfig/
        patterns: "*"
      register: inimerges
      delegate_to: localhost

    - name: fetch plasma configs we have inimerges for
      fetch: 
        src: "{{ userdir }}/.config/{{ item.path | basename }}"
        dest: "files/stock/"
      with_items:
         - "{{ inimerges.files }}"

# Then we do any ini merge oeprations
# check the files/plasma folder for configs
    - name: All of this needs doing on local host, so we can copy the resulting plasma ini files to the target
      block:

        - name: we need the inimerger, so lets clone that repo locally
          git:
            repo: 'https://gitea.sectigo.net/dylanh/inimerger.git'
            dest: files/inimerger

        - name: merge with any overrides
          # So this is OUTPUTTING to files/stage/host_name/.config/somefile the merge of the following files (in this order: in all cases assuming it exists:)
          # the stock file from the host's virgin install
          # the corresponding file from files/defaults/merges/dotconfig/
          # the corresponding file from files/host_name/merges/dotconfig/
          command: "files/inimerger/inimerge.py -o files/stage/{{ inventory_hostname }}/.config/{{ item.path | basename }} files/stock/{{ inventory_hostname }}/home/dylanh/.config/{{ item.path | basename }} {{ item.path }} files/{{ inventory_hostname }}/merges/dotconfig/{{ item.path | basename }}"
          with_items: "{{ inimerges.files }}"

      delegate_to: localhost
      tags: mergeinis

    - name: now copy the resulting files to the .config folder.
      copy:
        src: "files/stage/{{ inventory_hostname }}/.config/{{ item.path | basename }}"
        dest: "{{ userdir }}/.config/{{ item.path | basename }}"
        owner: dylanh
        group: dylanh
        mode: '0600'
      with_items: "{{ inimerges.files }}"

      # for testing, its cool to just to restart the session
    - name: restart sddm if we're testing
      systemd:
        state: restarted
        name: sddm.service
      when: inventory_hostname == 'vbox'

# bash configuration
    - name: install bash_profile
      copy:
        dest: "{{ userdir }}/.bash_profile"
        mode: '0644'
        content: |
          if [ -f ~/.bashrc ]; then
          	. ~/.bashrc
          fi
      tags:
        - createuser

    - name: install bashrc
      copy:
        dest: "{{ userdir }}/.bashrc"
        src: files/bash/bashrc
        owner: dylanh
        mode: '0644'
      tags:
        - createuser

# zsh and oh my zsh configuration
    - name: Cloning oh-my-zsh
      git:
        repo: https://github.com/ohmyzsh/ohmyzsh.git
        dest: ~/.oh-my-zsh
      become: yes
      become_user: dylanh


